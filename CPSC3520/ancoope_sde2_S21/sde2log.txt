

val first_duplicate : int list -> int = <fun>
# first_duplicate [1;2;3;4;5;6;7;4;5;8;9];;
- : int = 4
# first_duplicate [1;2;3;4;5;6;7;8;9;10];;
- : int = -10000

val first_nonrepeating : int list -> int = <fun>
# first_nonrepeating [1;2;9;3;2;7;5;9;6;1;10;30];;
- : int = 3
# first_nonrepeating [1;1;1;2;2;2];;
- : int = -10000

val sumOfTwo : int list * int list * int -> bool = <fun>
# sumOfTwo([1;2;3],[10;20;30;40],43);;
- : bool = true
# sumOfTwo([1;2;3],[10;20;30;40],15);;
- : bool = false

val cyk_sublists : int -> (int * int) list = <fun>
# cyk_sublists 4;;
- : (int * int) list = [(1, 3); (2, 2); (3, 1)]
# cyk_sublists 3;;
- : (int * int) list = [(1, 2); (2, 1)]
